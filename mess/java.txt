     切换Java版本：set path=C:\Program Files\Java\jdk-14.0.1\bin;%path%
时区设置：SET GLOBAL time_zone='+8:00';
一、重载与下列因素相关：
1、参数个数不同
2、参数类型不同
3、参数的多类型顺序不同

重载与下列因素无关
1、与参数的名称无关
2、与方法的返回值类型无关

重载与重写：
重载：方法名称一样，参数列表不一样
重写：方法名称一样，参数列表也一样 用在子类重写父类的方法中；创建的是子类对象，就优先用子类方法
重写中，子类方法的返回值必须小于等于父类方法的返回值；如String<Object




二、快捷键
shift+F6   改变名字相同的名字/常量换成大写/重构类
ctrl+alt+L   格式化代码 常用
alt+insert   构造方法与getter setter方法
Ctrl＋F12：显示当前文件的结构
Ctrl＋P：显示方法的参数信息
ctrl+D   复制此行填到下一行
ctrl+Y   删除此行
Ctrl+H：显示类结构图
CTRL+F: 选定替换
Ctrl＋F7：可以查询当前元素在当前文件中的引用，然后按F3可以选择
alt+enter   导入包自动修正
ctrl+alt+shift+鼠标左键点击拖动    多行相同代码同时选取
Ctrl＋Alt＋T：可以将代码包在一块内，例如try/catch
ctrl+alt+v 获取返回值对象，自动创建变量也就是=号前的变量定义
ctrl+shift+↑：将此行代码上移一行
4.fori   正序
4.forr  倒序
Alt+insert          	在创建类或接口或文件等等的时候可以使用
                     	在生成结构方法，set/get方法，toString
                     	可以使用双击shift        查找某个文件
itar 自动生成 array_for 循环
itco 自动生成Collection 迭代
iten 自动生成enumeration遍历
iter 自动生成增强for 循环
itit 自动生成iterator 迭代
itli 自动生成List的遍历
ittok 自动生成String token遍历
itve 自动生成Vector数组迭代




三、String类
对于基本类型来说，==是数值的比较
对于引用类型来说，==是地址的比较
双引号直接写的字符串在常量池中，new出来的不在
数值的比较可以用equals
推荐"abc".equals(str1);
忽略大小写用equalsIgnoreCase(String str)
public int length()获取字符串长度
public String concat(String str)将当前字符串和参数字符串拼接成为返回值新的字符串
public char charAt(int index)获取指定索引位置的单个字符串
public int indexOf(String str)查找参数字符串在本字符串当中首次出现的索引位置，不存在则返回-1
public String substring(int index)截取从索引值到末尾的字符串返回新串
public String substring(int begin,int end)截取指定位置字符串，左闭右开
public char[] toCharArray() 将当前字符串拆分成为字符数组作为返回值
public byte[] getByte() 获得当前字符串底层的字节数组
public  String replace(CharSequence oldString,CharSequence newString) 老字符串替换成新字符串
public String[] split(String regex) 按照参数的规则，将字符串切分成为若干部分
	split方法的参数其实是一个正则表达式
 
四、static关键字
静态方法不属于对象而是属于类。静态方法通过类名称进行调用
静态方法不能访问非静态。在内存中先有的静态，后有的非静态 
静态方法中不能用this关键字 因为this指代当前对象，而静态方法不属于对象而是属于类的
静态方法通过类名.方法名(参数)直接使用


五、Arrays:util包下，提供了大量的静态方法，用来实现数组常见的操作
public static String toString(数组) 将参数数组变成字符串
public static void sort(数组) 按照默认升序对数组元素进行排序

六、Math类  以下都是静态方法
abs  绝对值
ceil  向上取整
floor  向下取整
round  四舍五入

七、继承
1、子类必须调用父类构造方法，默认有一个隐含的super()调用，且先夫后子
2、super()调用符父类重载构造，如super()调用无参，super(10)调用有参
3、一个子类构造只能调用一次super构造
4、super关键字的三种用法：（访问父类的内容）
	在子类的成员方法中，访问父类的成员变量
	在子类的成员方法中，访问父类的成员方法
	在子类的构造方法中，访问父类的构造方法
5、this关键字的三种用法： （访问本类的内容）
	在本类的成员方法中，访问本类的成员方法
	在本类的成员方法中，访问本类的另一个成员方法
	在本类的构造方法中，访问本类的另一个构造方法
super和this不能同时使用
6、抽象类的子类，必须重写父类中所有的抽象方法，除非该子类也是抽象类



八、接口
1、接口的默认方法可以通过接口实现类对象直接调用，也可以被接口实现类进行覆盖重写
2、成员方法：编译看左边，运行看右边；成员变量：编译运行都看左边
3、向上转型：永远是安全的，体现多态性 Animal animal = new Cat();animal.eat();//调用cat类的eat方法
4、向上转型的弊端：一旦对象向上转型，就无法使用子类特有的内容。解决方法：使用对象的向下转型还原
5、向下转型：Animal animal = new Cat();//猫向上转型为动物
	      Cat cat = (Cat) animal;//当作动物的猫向下转型还原为猫
6、if(animal instanceof Cat){
	Cat cat =(Cat) animal;//向下转型
	cat.catchMouse();
}


九、final、权限、内部类
1、final表示最终的、不可改变的，可以用来修饰类、方法、局部变量、成员变量
2、final修饰局部变量时，对象的地址值不能改变，对象指向的值是可以变化的
3、成员变量具有默认值，所以对于final的成员变量，要么直接赋值，要么使用构造方法赋值（在无参构造中赋值并去掉setter方法）
4、成员内部类：内用外，随意访问；外用内，需要内部类对象
5、匿名内部类：
MyInterface obj = new MyInterface(){
	@override
	public void method(){
		System.out.println();
	}
};
obj.method();